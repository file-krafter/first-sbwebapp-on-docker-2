name: CI/CD Pipeline

on:
  push:
    branches: ["main"]

env:
  IMAGE_NAME: ${{ secrets.DOCKERHUB_USERNAME }}/${{ secrets.DOCKERHUB_REPO }}

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
    - name: 📥 Checkout Code
      uses: actions/checkout@v4

    - name: ☕ Set up Java 21
      uses: actions/setup-java@v4
      with:
        java-version: '21'
        distribution: 'temurin'

    - name: 🧰 Install Maven if missing
      run: |
        if ! command -v mvn &> /dev/null; then
          echo "Maven not found, installing..."
          sudo apt update
          sudo apt install -y maven
        else
          echo "✅ Maven already installed"
          mvn -v
        fi

    - name: 🏗️ Build with Maven
      run: mvn clean package -DskipTests

    - name: 🔐 Docker Login
      run: echo "${{ secrets.DOCKERHUB_PASSWORD }}" | docker login -u "${{ secrets.DOCKERHUB_USERNAME }}" --password-stdin

    - name: 🐳 Build Docker Image
      run: |
        echo "Building Docker image: $IMAGE_NAME"
        docker build -t $IMAGE_NAME .

    - name: 🚀 Push Docker Image
      run: |
        echo "Pushing Docker image: $IMAGE_NAME"
        docker push $IMAGE_NAME

    - name: ⚙️ Deploy to EC2
      uses: appleboy/ssh-action@master
      with:
        host: ${{ secrets.EC2_HOST }}
        username: ${{ secrets.EC2_USER }}
        key: ${{ secrets.EC2_SSH_KEY }}
        script: |
          echo "🚀 Connecting to EC2..."
          echo "🧪 Checking Docker..."
          docker --version || (echo "❌ Docker not found"; exit 1)

          echo "🔍 Pulling Docker image: $IMAGE_NAME"
          docker pull $IMAGE_NAME

          echo "🛑 Stopping existing container (if any)"
          docker stop springbootapp || true
          docker rm springbootapp || true

          echo "🆕 Running new container"
          docker run -d -p 8080:8080 --name springbootapp $IMAGE_NAME

    # Optional: One-time permission fix and reboot
    - name: 🛠️ (One-Time Setup) Fix Docker Permissions & Reboot
      if: false  # Change to `true` ONLY the first time
      uses: appleboy/ssh-action@master
      with:
        host: ${{ secrets.EC2_HOST }}
        username: ${{ secrets.EC2_USER }}
        key: ${{ secrets.EC2_SSH_KEY }}
        script: |
          echo "🔧 Adding ubuntu to docker group"
          sudo usermod -aG docker $USER
          echo "♻️ Rebooting EC2 instance to apply permissions..."
          sudo reboot
